<style type="text/css">
    .progress-bar.indeterminate {
        position: relative;
        animation: progress-indeterminate 3s linear infinite;
    }

    @@keyframes progress-indeterminate {

        from {
            left: -25%;
            width: 25%;
        }

        to {
            left: 100%;
            width: 25%;
        }
    }
</style>

<div id="spinner" style="display: none;">
    <div class="progress" style="position: relative;">
        <div class="progress-bar progress-bar-striped indeterminate"></div>
    </div>
</div>

<div id="danger-alert" style="display: none;">
    <div id="danger-alert-text" class="alert alert-danger" role="alert">
        Request Failed.
    </div>
</div>

<form id="upload-receipt-form" name="upload-receipt-form">
    <h3>Upload Receipt For Analyzing</h3>
    <div class="form-group">
        <input id="receipt" name="receipt" type="file" accept="image/*"/>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-default">Submit</button>
    </div>
</form>

<div id="receipt-results" style="display: none;">

</div>

<script>
    var form = document.getElementById('upload-receipt-form');
    if (form.attachEvent) {
        form.attachEvent("submit", processForm);
    } else {
        form.addEventListener("submit", processForm);
    }

    function isReceiptFileTypeValid() {
        var fileName = document.getElementById('receipt').value;
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        return extFile == "jpg" || extFile == "jpeg" || extFile == "png";
    }

    function processForm(e) {
        if (e.preventDefault) e.preventDefault();

        if (!isReceiptFileTypeValid()) {
            alert('Please upload an image.');
            return;
        }

        makeApiRequest({
            type: 'POST',
            url: '/api/receipt',
            data: new FormData(form),
            contentType: false,
            processData: false,
        })
            .then((res) => {
                showReceiptResult(res);
            })
            .catch(e => console.log(e));

        return false;
    }

    function showReceiptResult(res) {
        const container = $("#receipt-results");
        container.empty();
        const azureTable = renderAzureTable(res.azureRecognizedForm);
        container.append(azureTable);

        const clarifaiTable = renderClarifaiGeneralModelTable(res.clarifaiGeneralModel);
        container.append(clarifaiTable);

        container.show();
    }

    function renderAzureTable(form) {
        const rows = [];

        const fields = form["Fields"];
        const fieldKeys = Object.keys(fields);
        for (let fieldKey of fieldKeys) {
            const fieldObject = fields[fieldKey];
            let fieldValue = null;
            if (fieldObject["ValueData"] && fieldObject["ValueData"]["Text"]) {
                fieldValue = fieldObject["ValueData"]["Text"];
            }
            const fieldConfidence = fieldObject["Confidence"];
            rows.push(`
            <tr>
                <td>${fieldKey}</td>
                <td>${fieldValue}</td>
                <td>${fieldConfidence}</td>
            </tr>
            `)
        }

        return `
<h3>Azure Extracted Values</h3>
<table class="table">
  <thead>
    <tr>
      <th scope="col">Property</th>
      <th scope="col">Value</th>
      <th scope="col">Confidence</th>
    </tr>
  </thead>
  <tbody>
    ${rows.join('\n')}
  </tbody>
</table>
        `;
    }

    function renderClarifaiGeneralModelTable(model) {
        const rows = [];

        let concepts = [];
        if (model["Data"] && model["Data"]["Concepts"]) {
            concepts = model["Data"]["Concepts"];
        }

        for (const concept of concepts) {
            rows.push(`
            <tr>
                <td>${concept['Name']}</td>
                <td>${concept['Value']}</td>
            </tr>
            `
            );
        } 

        return `
<h3>Identified Clarifai Concepts / Tags</h3>
<table class="table">
  <thead>
    <tr>
      <th scope="col">Concept</th>
      <th scope="col">Confidence</th>
    </tr>
  </thead>
  <tbody>
    ${rows.join('\n')}
  </tbody>
</table>
        `;
    }

    function retryingAjax(ajaxOptions, maxRetries, timeoutMs) {
        const thunk = () => ajaxPromise(ajaxOptions);
        const retry = (fn, maxRetries, timeoutMs) => new Promise((resolve, reject) => {
            fn()
                .then(resolve)
                .catch((e) => {
                    if (maxRetries === 1) {
                        return reject(e);
                    }
                    console.log('retrying failed promise...');
                    setTimeout(() => {
                        retry(fn, maxRetries - 1, timeoutMs).then(resolve).catch(reject);
                    }, timeoutMs);

                })
        });
        return retry(thunk, maxRetries, timeoutMs);
    }

    function ajaxPromise(ajaxOptions) {
        return new Promise((resolve, reject) => {
            $.ajax(ajaxOptions)
                .done(function (data) { resolve(data) })
                .fail(function (jqXHR) { reject(jqXHR) });
        });
    }

    async function makeApiRequest(ajaxOptions, maxRetries = 5, timeoutMs = 1000) {
        try {
            hideAlert();
            showSpinner();
            const res = await retryingAjax(ajaxOptions, maxRetries, timeoutMs);
            return res;
        } catch (e) {
            if (e.status) {
                showAlert(`Request Failed with status code ${e.status}`);
            } else {
                showAlert("Request Failed");
            }
            throw e;
        } finally {
            hideSpinner();
        }
    }

    function showSpinner() {
        $("#spinner").show();
    }

    function showAlert(msg) {
        $("#danger-alert-text").text(msg);
        $("#danger-alert").show();
    }

    function hideSpinner() {
        $("#spinner").hide();
    }

    function hideAlert() {
        $("#danger-alert").hide();
    }

</script>